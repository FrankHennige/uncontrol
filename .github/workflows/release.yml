name: Continuous Delivery

on:
  push:
    branches:
      - main

# default: least privileged permissions across all jobs
permissions:
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write

    steps:
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Evaluate | Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | awk -F '\\.\\.\\.' '{print $2}' | cut -d ' ' -f1)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          set -o pipefail
          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi
          HEAD_SHA="$(git rev-parse HEAD)"
          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi
          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Action | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.4.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          verbosity: "2"
          build: "true"

      - name: Debug | Log Semantic Release Outputs
        run: |
          echo "Semantic Release Outputs: ${{ toJSON(steps.release.outputs) }}"
          echo "Released: ${{ steps.release.outputs.released }}"
          echo "Tag: ${{ steps.release.outputs.tag }}"

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.4.1
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

      - name: Build and Push Docker Image
        if: needs.release.outputs.released == 'true'
        run: |
          # Login to Docker Hub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          
          # Get the release tag and strip leading 'v' if present
          TAG="${{ needs.release.outputs.tag }}"
          echo "Raw tag: $TAG"
          CLEAN_TAG="${TAG#v}"
          echo "Clean tag: $CLEAN_TAG"
          
          # Check if the tag is empty
          if [ -z "$TAG" ]; then
            echo "::error::Release tag is empty, cannot proceed with Docker build"
            exit 1
          fi
          if [ -z "$CLEAN_TAG" ]; then
            echo "::error::Clean tag is empty after processing, cannot proceed with Docker build"
            exit 1
          fi
          
          # Check if the tag is a full version (no rc, alpha, beta, etc.)
          if echo "$CLEAN_TAG" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Full version detected: $CLEAN_TAG"
          
            # Extract major and minor versions (e.g., 1.2.3 -> 1.2 and 1)
            MAJOR_MINOR=$(echo "$CLEAN_TAG" | cut -d. -f1-2)
            MAJOR=$(echo "$CLEAN_TAG" | cut -d. -f1)
            echo "Major-Minor: $MAJOR_MINOR, Major: $MAJOR"
          
            # Build the Docker image
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$CLEAN_TAG .
          
            # Tag and push all versions
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$CLEAN_TAG ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$MAJOR_MINOR
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$CLEAN_TAG ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$MAJOR
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$CLEAN_TAG ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:latest
          
            # Push all tags
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$CLEAN_TAG
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$MAJOR_MINOR
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:$MAJOR
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/uncontrol:latest
          else
            echo "Skipping Docker push: $CLEAN_TAG is not a full version (e.g., contains rc, alpha, beta)"
          fi
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag: ${{ steps.release.outputs.tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.released == 'true' }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
